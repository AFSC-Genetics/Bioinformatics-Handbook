{
  "hash": "15c41d270e434909881ec7e38b497b34",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"File Transfer\"\nauthor: \"Natasha Howe\"\nformat: html\neditor: visual\n---\n\n## RCLONE\n\nRclone allows you to transfer information between google drive and sedna. This is the most likely need for rclone in this lab, but it is not limited to that application. The [Sedna informational document](https://docs.google.com/document/d/1nn0T0OWEsQCBoCdaH6DSY69lQSbK3XnPlseyyQuU2Lc/edit?pli=1#heading=h.qpx57rvxr0sj) has basic steps to get started with rclone, which can use to get started in place of this handbook. This page provides instructions on how to began with rclone, but it will not cover all of rclone's usages, which can be found at their [website](https://rclone.org/). However, if you are accessing the remote server on a Windows computer, you may run into more issues than that of Linux/Mac, and troubleshooting steps are included below if necessary.\n\n## Configuring rclone on your sedna account\n\nThis section is essentially a copy of what is on the SEDNA bioinformatics cluster information document, but it is also present here to get you started. This information is currently only to transfer from sedna to a google drive account, but rclone has more services than just this.\n\nWhen you first connect to sedna, use the below command by adding the local host.\n\n::: {#a4337620 .cell execution_count=1}\n``` {.python .cell-code}\n# replace USERNAME with your sedna account name\nssh -L localhost:53682:localhost:53682 USERNAME@sedna.nwfsc2.noaa.gov\n```\n:::\n\n\nFirst, load rclone on sedna.\n\n::: {#f9e01e43 .cell execution_count=2}\n``` {.python .cell-code}\nmodule load tools/rclone/1.59.2\n```\n:::\n\n\nConfigure a remote directory using the following steps:\n\n::: {#1f88b7f4 .cell execution_count=3}\n``` {.python .cell-code}\n# Step 1\nrclone config\n\n# Step 2\n# type n for \"new remote\" and name it, then hit enter\ne) Edit existing remote\nn) New remote\nd) Delete remote\nr) Rename remote\nc) Copy remote\ns) Set configuration password\nq) Quit config\ne/n/d/r/c/s/q> n\nname> RCLONE_DRIVE_NAME\n\n# Step 3\n# choose your storage, which is likely Google Drive\n# if google drive, type 18\nOption Storage.\nType of storage to configure.\nChoose a number from below, or type in your own value.\n 1 / 1Fichier\n   \\ (fichier)\n 2 / Akamai NetStorage\n   \\ (netstorage)\n 3 / Alias for an existing remote\n   \\ (alias)\n 4 / Amazon Drive\n   \\ (amazon cloud drive)\n...\n16 / FTP\n   \\ (ftp)\n17 / Google Cloud Storage (this is not Google Drive)\n   \\ (google cloud storage)\n18 / Google Drive\n   \\ (drive)\n19 / Google Photos\n   \\ (google photos)\n20 / HTTP\n   \\ (http)\n...\n49 / seafile\n   \\ (seafile)\nStorage> 18\n\n# Step 4\n# just hit enter without typing anything here\nOption client_id.\nGoogle Application Client Id\nSetting your own is recommended.\nSee https://rclone.org/drive/#making-your-own-client-id for how to create your own.\nIf you leave this blank, it will use an internal key which is low performance.\nEnter a value. Press Enter to leave empty.\nclient_id>\n\n# Step 5\n# same here, just enter\nOption client_secret.\nOAuth Client Secret.\nLeave blank normally.\nEnter a value. Press Enter to leave empty.\nclient_secret>\n\n#Step 6\n# choose 1 for full access\nOption scope.\nScope that rclone should use when requesting access from drive.\nChoose a number from below, or type in your own value.\nPress Enter to leave empty.\n 1 / Full access all files, excluding Application Data Folder.\n   \\ (drive)\n 2 / Read-only access to file metadata and file contents.\n   \\ (drive.readonly)\n   / Access to files created by rclone only.\n 3 | These are visible in the drive website.\n   | File authorization is revoked when the user deauthorizes the app.\n   \\ (drive.file)\n   / Allows read and write access to the Application Data folder.\n 4 | This is not visible in the drive website.\n   \\ (drive.appfolder)\n   / Allows read-only access to file metadata but\n 5 | does not allow any access to read or download file content.\n   \\ (drive.metadata.readonly)\nscope> 1\n\n# Step 7\n# again, hit enter\nOption service_account_file.\nService Account Credentials JSON file path.\nLeave blank normally.\nNeeded only if you want use SA instead of interactive login.\nLeading `~` will be expanded in the file name as will environment variables such as `${RCLONE_CONFIG_DIR}`.\nEnter a value. Press Enter to leave empty.\nservice_account_file>\n\n# Step 8\n# do not edit advanced contig, n\nEdit advanced config?\ny) Yes\nn) No (default)\ny/n> n\n\n# Step 9\n# This step is where you may run into issues with a PC\n# First, try \"y\" for auto config\nUse auto config?\n * Say Y if not sure\n * Say N if you are working on a remote or headless machine\ny) Yes (default)\nn) No\ny/n> y\n\n# this will provide the following output, which contains a website that you will copy and paste into a browser on your computer\n2024/02/08 12:04:56 NOTICE: If your browser doesn't open automatically go to the following link: http://127.0.0.1:53682/auth?state=r9jyi5-A0or3ILWoMU6WqQ\n2024/02/08 12:04:56 NOTICE: Log in and authorize rclone for access\n2024/02/08 12:04:56 NOTICE: Waiting for code...\n```\n:::\n\n\nIf the auto config works, it will give you this screen, to which you would select \"Allow\":\n\n![](rclone_website.PNG){width=\"317\"}\n\nThis will result in a new screen that says **\"Success! All done. Please go back to rclone.\"**\n\nIf this step does not work as shown above (often the website will show an error), skip to the \"**Troubleshooting\"** section below.\n\nIf the above step worked, you should see \"Got code\" on your ssh, and the next step will appear.\n\n::: {#4861e28d .cell execution_count=4}\n``` {.python .cell-code}\n2024/02/08 12:07:06 NOTICE: Got code\n\n# Step 10\n# Choose whichever matches your destination\n# If transferring to/from ABL Genetics, select y\n# If transferring to/from your own drive, select n\nConfigure this as a Shared Drive (Team Drive)?\n\ny) Yes\nn) No (default)\ny/n> y\n\n# Step 11\n# select ABL Genetics, 1\nOption config_team_drive.\nShared Drive\nChoose a number from below, or type in your own string value.\nPress Enter for the default (0AFAMZunTPxmIUk9PVA).\n 1 / ABL Genetics\n   \\ (0AFAMZunTPxmIUk9PVA)\nconfig_team_drive> 1\n\n# Step 12\n# Results, and say \"Yes this is OK\", y\nConfiguration complete.\nOptions:\n- type: drive\n- scope: drive\n- token: {\"access_token\":\"ya29.a0AfB_byDuRDuRvJDxOmj-HHz6bWinV4FRRzDYmXFj9MriIjURlXFGvTftorRwBXcAOmxUy22xjrVtDSfgMP4BoUU6v4Bcc6r3PSBZsMbNR_k5bGBccC0cipjfAZsK0x9_Rj11-6c0ihQTLC3kj3eXmiHqUbojaCNhIpSpaCgYKARoSARESFQHGX2MiXF3vjKG4BidUr_isGHQQ8A0171\",\"token_type\":\"Bearer\",\"refresh_token\":\"1//06BWwBypNxLDJCgYIARAAGAYSNwF-L9Ir1jygSebphM0ZicoL24k5P_vsQ5rrrnmqSlCVHCZ-b8J2jHUXhI1ZTX30FeK6yVEL90M\",\"expiry\":\"2024-02-08T13:07:05.909470766-08:00\"}\n- team_drive: 0AFAMZunTPxmIUk9PVA\n- root_folder_id:\nKeep this \"test\" remote?\ny) Yes this is OK (default)\ne) Edit this remote\nd) Delete this remote\ny/e/d> y\n\n# Step 13\n# Lastly, it will show you your current configured remotes\n# Quit to get out of rclone config, q\n# To set up another remote directory, n\nCurrent remotes:\n\nName                 Type\n====                 ====\nablg_shared          drive\nnh_google            drive\nRCLONE_DRIVE_NAME    drive\n\ne) Edit existing remote\nn) New remote\nd) Delete remote\nr) Rename remote\nc) Copy remote\ns) Set configuration password\nq) Quit config\ne/n/d/r/c/s/q> q\n```\n:::\n\n\nYou may notice that there are three directories set up in this example. It may be easiest to create two rclone remote directories immediately - one for the shared ABL Genetics Google drive and another for your separate Google drive folders. If you first set it up for the shared drive, you can go through the above steps again and create a new remote directory for your own drive folders by selecting \"No\" on the *Shared Drive* step.\n\nCheck that your remote directory leads you to the Google Drive folders you want:\n\n::: {#577b9329 .cell execution_count=5}\n``` {.python .cell-code}\n# list directories\nrclone lsd RCLONE_DRIVE_NAME:\n  \n# for the ABL Genetics folder, I named my rclone directory \"ablg_shared\"\nrclone lsd ablg_shared:\n          -1 2023-10-30 14:18:15        -1 Whole genome backup\n          -1 2023-11-20 11:59:28        -1 rockfishLET\n```\n:::\n\n\nIf the data to be transferred is shared with you on Google (which is different from a shared drive), use the `--drive-shared-with-me` flag. You can only access this if you *do not* set up your directory as a shared drive.\n\n::: {#12017db5 .cell execution_count=6}\n``` {.python .cell-code}\nrclone lsd RCLONE_DRIVE_NAME: --drive-shared-with-me\n          -1 2021-04-22 17:00:11        -1 SEDNA for users\n          -1 2023-11-19 22:49:14        -1 pink_salmon_run_timing\n          -1 2023-11-20 10:11:41        -1 sockeye_whole_genome_dat_for_laura\n\n# investigate subfolders\nrclone lsd RCLONE_DRIVE_NAME:pink_salmon_run_timing --drive-shared-with-me\n          -1 2023-12-06 15:19:45        -1 Data\n          -1 2023-11-20 10:31:36        -1 HighRes_Figures\n```\n:::\n\n\nYou can search within subdirectories. Also, if you want to see the content of the folders, use `ls` to list all the files and the file sizes.\n\n::: {#4b7799ec .cell execution_count=7}\n``` {.python .cell-code}\nrclone ls RCLONE_DRIVE_NAME:pink_salmon_run_timing/Data --drive-shared-with-me\n      108 Pink_blocklist_1x.txt\n    22080 Pink_filtered_bamslist.txt\n```\n:::\n\n\nThere are a host of other rclone commands, and you can peruse the \"commands\" tab on their website to see further functionality. For example, `rclone tree` can be used to look at the files, and all files in subdirectories.\n\n## Transferring data to/from your rclone directory\n\nFirst, get on a compute node for the data transfer.\n\n::: {#954cb95e .cell execution_count=8}\n``` {.python .cell-code}\nsrun -c 1 -t 12:00:00 --pty /bin/bash\n```\n:::\n\n\nUse the `rclone copy` command to transfer data. It incorporates its own checksum system during the transfer, so you can cancel and restart a transfer, and it should pick up where it left off without issues. If you want to see output during the transfer, you can add the verbose flag `-v` at the end of the line. If you are transferring to/from a drive shared with you, make sure to include the `--drive-shared-with-me` flag.\n\n::: {#eeaa72dc .cell execution_count=9}\n``` {.python .cell-code}\n# FROM SEDNA TO GOOGLE DRIVE\nrclone copy /home/usr/directory/to/file.txt RCLONE_DRIVE_NAME:google/drive/directory -v\n\n# From Google Drive to sedna for a google folder that was shared with me\nrclone copy RCLONE_DRIVE_NAME:google/drive/directory /home/usr/directory/to/transfer --drive-shared-with-me\n```\n:::\n\n\nIf you plan to transfer entire folders, you can do more than one file at a time.\n\n::: {#4a467b9d .cell execution_count=10}\n``` {.python .cell-code}\n# navigate to directory \ncd /directory/to/transfer\n\nrclone copy . RCLONE_DRIVE_NAME:google/drive/directory/ -v\n\n# alternatively, you can copy one file at a time using the following for loop (from Laura), which can also be used to subset the data to transfer this way as well.\nfor i in /directory/to/transfer/ABLG*; do echo ${i}; rclone copy ${i} RCLONE_DRIVE_NAME:google/drive/directory/ -v; done\n```\n:::\n\n\nCheck if the entire folder was transferred properly if you are currently in the directory that has transferred. *NH - need to double check the code for this (**does it accept the astericks?**).*\n\n::: {#0ce43117 .cell execution_count=11}\n``` {.python .cell-code}\nrclone check RCLONE_DRIVE_NAME:google_drive_folder/* . --one-way\n```\n:::\n\n\nDrawback of rclone: If you are transferring large amounts of data, you may run into an issue where your user rate limit is exceeded. This is a function of Google security measures that prevent continuous transferring in order to ward off illegal activities. As far as I am aware, there is no immediate solution, so you may have to wait hours (or longer) to restart your data transfer.\n\n::: {#d3cfc202 .cell execution_count=12}\n``` {.python .cell-code}\nERROR : Failed to copy: googleapi: Error 403: User rate limit exceeded., userRateLimitExceeded\n```\n:::\n\n\n## Troubleshooting rclone config - likely just for PC users.\n\nIf the auto config does not work, you may have to download rclone onto your home computer. Start by downloading rclone: <https://downloads.rclone.org/v1.59.2/>\n\nExtract the executable file.\n\nOn the command line for your home computer, navigate to the folder where you extracted the executable file. For me that is:\n\n::: {#3bfef42a .cell execution_count=13}\n``` {.python .cell-code}\ncd C:\\rclone\\rclone-v1.52.9-windows-amd64\n\n# I only had to complete this step once after downloading.\nstart .\\rclone.exe \n```\n:::\n\n\nNow return to `rclone config` on sedna. You may have to delete the failed remote directory and start a new one, completing all the steps as above until you get to `use auto config?`, for which you say `no`.\n\nReturn to your home computer's command line and type the following to get the token verification:\n\n::: {#debf4c45 .cell execution_count=14}\n``` {.python .cell-code}\n.\\rclone authorize \"drive\"\n\n# Which results in a similar output to below:\n\nIf your browser doesn't open automatically go to the following link: http://127.0.0.1:53682/auth?state=JF1IBQPMBWThTru98O2MKw Log in and authorize rclone for access Waiting for code... Got code Paste the following into your remote machine ---\\> {\"access_token\":\"ya29.a0AfB_byAxDN2Pf5cBYrBcK9P8_hhgVSfztkf_K_iQ2j15febzaFqlSNPsJXfj9L4b2J7rXXIFzbq7e6W-mrupSU--p0tTi7iA6rnpdwC95mYQk_h7gU6m56Xa-LFu32WJyencRkz2lt1d_MS8-wN1jDN4OI9Y8k1H-8xJaCgYKAfASARESFQHGX2MibtA9KFMk-266SPqNRR_Zow0171\",\"token_type\":\"Bearer\",\"refresh_token\":\"1//06RybmGeNK7-kCgYIARAAGAYSNwF-L9Ir2qWdHgTpfdzNMLDUhPSr7_keDi6edSn9_T61ADm06_o7lmV0U6uSFKJBlpwgrunn6hA\",\"expiry\":\"2023-11-20T21:21:50.0984646-08:00\"} \\<---End paste\n```\n:::\n\n\nCopy everything including the {} and paste in the sedna ssh `rclone config` token verification. It should pop up a window and then you should be able to continue with the configuration as described above.\n\n",
    "supporting": [
      "05-File_Transfers_files"
    ],
    "filters": [],
    "includes": {}
  }
}